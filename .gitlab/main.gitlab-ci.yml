# Variables needed for this file.
# Commented out values are passed from GitLab CI/CD-settings.
variables:
  # Make Git clone the submodules as well.
  GIT_SUBMODULE_STRATEGY: recursive
  # Tags for runner selection.
  SF_TARGET_ARCH: "amd64"
  SF_TARGET_OS: "linux"
  # Directory for generated packages.
  SF_DIR_PKG: "bin/pkg"
  # Name of the branch that allows running deploying to production. (set from CI/CD settings)
  #SF_RELEASE_BRANCH: "main"
  # Output directory used by 'coverage-report.sh'.
  SF_GCOVR_DIR: "bin/gcov"
  # Nexus exchange directory for coverage reports between child and parent pipeline.
  SF_EXCHANGE_DIR: "gitlab-ci/${CI_PROJECT_PATH}/pipeline/${CI_PIPELINE_ID}"
  # To propagate the CI_PIPELINE_ID to the child pipeline.
  SF_PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"

workflow:
  rules:
    # No pipeline when SF_SIGNAL equals 'skip'.
    - if: '$SF_SIGNAL == "skip"'
      when: never
    # Run pipeline initiated by a merge request event.
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    # Run pipeline initiated by the web application.
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    # Prevent double pipeline when having this workflow.
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_PROTECTED == "true"'
      when: always
    - when: never
  # Cancel when there is a new commit.
  auto_cancel:
    on_new_commit: interruptible

stages:
  - check
  - build
  - report

# Defaults for all jobs.
default:
  # Tags determine the selection of a runner.
  tags:
    - cplusplus
    - "${SF_TARGET_OS}"
    - "${SF_TARGET_ARCH}"

# Rules for build jobs.
.build-rules:
  rules:
    # Skip if signal is 'test'.
    - if: '$SF_SIGNAL == "test"'
      when: never
    # For testing the 'deploy' jobs.
    - if: '$SF_SIGNAL == "deploy"'
      when: manual
      allow_failure: true
    # Run manual when triggered by web.
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
    - when: on_success
    - allow_failure: false

# Reports the environment variables for debugging.
check-env:
  stage: check
  script:
    - 'echo "Working Directory=$(pwd)"'
    # Print all environments variables sorted to make it easier to find.
    - 'echo "Environment Dump" && printenv | sort'
    # Check the formatting of the code.
    - 'if [[ -f check-format.sh ]]; then ./check-format.sh; fi'

# Does a cache and artifact check.
cache-test:
  stage: build
  needs:
    - job: check-env
  rules:
    # Run when signal is test.
    - if: '$SF_SIGNAL != "test"'
      when: never
    - when: on_success
    - allow_failure: false
  variables:
    # Set the toolchain to use.
    SF_TOOLCHAIN: "toolchain"
    SF_BUILD_TYPE: "debug"
    SF_DIR_BIN: "bin/lnx64"
  trigger:
    forward:
      yaml_variables: true
    include:
      - local: .gitlab/test.gitlab-ci.yml

linux-gnu:
  stage: build
  needs:
    - job: check-env
    - job: linux-gcov
  extends: .build-rules
  variables:
    # Set the toolchain to use.
    SF_TOOLCHAIN: "gnu"
    SF_BUILD_TYPE: "release"
    SF_DIR_BIN: "bin/lnx64"
  trigger:
    forward:
      yaml_variables: true
    strategy: depend
    include:
      - local: .gitlab/build-single.gitlab-ci.yml

linux-gw:
  stage: build
  needs:
    - job: check-env
    - job: linux-gcov
  extends: .build-rules
  variables:
    # Set the toolchain to use.
    SF_TOOLCHAIN: "gw"
    SF_BUILD_TYPE: "release"
    SF_DIR_BIN: "bin/win64"
  trigger:
    strategy: depend
    forward:
      yaml_variables: true
    include:
      - local: '.gitlab/build-single.gitlab-ci.yml'

# TODO: Coverage information is not read from child pipelines.
#  See: https://gitlab.com/gitlab-org/gitlab/-/issues/280818
linux-gcov:
  stage: build
  needs: [check-env]
  variables:
    # Set the toolchain to use.
    SF_TOOLCHAIN: "gnu"
    SF_BUILD_TYPE: "coverage"
    SF_DIR_BIN: "bin/lnx64"
  rules:
    # Skip if signal is "test"
    - if: '$SF_SIGNAL == "test"'
      when: never
    # Run always when triggered by a merge request event.
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: on_success
      allow_failure: false
    # By default, run manual.
    - when: manual
    - allow_failure: true
  trigger:
    strategy: depend
    forward:
      yaml_variables: true
    include:
      - local: '.gitlab/coverage.gitlab-ci.yml'

# Report the coverage generated in the pipeline using infor stored on Nexus.
report-coverage:
  stage: report
  needs: [linux-gcov]
  coverage: /^\s*lines:\s*\d+.\d+\%/
  artifacts:
    name: "${CI_COMMIT_REF_NAME}-${SF_TOOLCHAIN}"
    paths:
      - "${SF_GCOVR_DIR}/report.*"
    reports:
      coverage_report:
        coverage_format: cobertura
        path: "${SF_GCOVR_DIR}/report.xml"
    expire_in: 2 days
    exclude:
      - "**/.gitkeep"
  script:
    # Retrieve the coverage file needed for GitLab created by the child pipeline.
    - 'cmake/lib/bin/exchange-nexus.sh --remote "${SF_EXCHANGE_DIR}" --local "${SF_GCOVR_DIR}" report.xml report.txt'
    # Output the report.txt for the regex to pickup on.
    - 'if [[ -f "${SF_GCOVR_DIR}/report.txt" ]]; then cat "${SF_GCOVR_DIR}/report.txt"; fi'
